{
"title": "【javascript】新增DOM节点无法监听事件，以及对于事件托管的个人感受",
"index": "3",
"date" : "2016-03-20",
"tag"  : "javascript，事件托管",
"content": [
"<strong>【Preface】</strong>",
"<p>最近写监听事件及对应的触发函数，针对页面上已存在DOM节点（直接写在HTML上的），获取对应的DOM进行事件监听，没有一点问题，但是如果监听的某一个DOM节点是通过js动态生成的话，发现之前的事件监听无法获取到该DOM节点。</p>",
"<br><strong>【Main Body】</strong>",
"<p>照例，贴上示例代码配合说明（关于js，也是使用了jquery类库，又偷了点懒）：</p>",
"<strong>【html】</strong>",
"<div class=\"code-container\"><code>",
"<xmp><div id=\"testContainer\"></xmp>",
"<xmp class=\"indent-1\"><button class=\"test-btn\">测试的按钮</button></xmp>",
"<xmp></div></xmp>",
"</code></div>",
"<strong>【javascript】</strong>",
"<div class=\"code-container\"><code>",
"<xmp><script></xmp>",
"<xmp class=\"indent-1\">$('.test-btn').on('click', function() {</xmp>",
"<xmp class=\"indent-2\">alert('click!');</xmp>",
"<xmp class=\"indent-2\">var test = '<button class=\"test-btn\">测试的按钮</button>';</xmp>",
"<xmp class=\"indent-2\">$('testContainer').append(test);</xmp>",
"<xmp class=\"indent-1\">}</xmp>",
"<xmp class=\"indent-1\">/* 以下是修改之后、没有本文提到的问题的写法</xmp>",
"<xmp class=\"indent-1\">$('#testContainer').on('click', '.test-btn', function() {</xmp>",
"<xmp class=\"indent-2\">alert('click!');</xmp>",
"<xmp class=\"indent-2\">var test = '<button class=\"test-btn\">测试的按钮</button>';</xmp>",
"<xmp class=\"indent-2\">$('testContainer').append(test);</xmp>",
"<xmp class=\"indent-1\">}</xmp>",
"<xmp class=\"indent-1\">*/</xmp>",
"<xmp></script></xmp>",
"</code></div>",
"<p>上述示例代码，点击按钮后，会弹出一个alert，然后生成一个新的按钮，class名为test-btn，和原先的按钮一样。</p>",
"<p>运行上述代码后，就会发现点击了按钮之后，alert弹出来了，之后按钮也生成了，但是点击新生成的按钮，却是没有反应，换而言之，没有获取到这个DOM节点。</p>",
"<p>Why？！明明class名是对的，但是就是没有获取到呢？</p>",
"<p>根据我自己的理解，javascript的监听事件，应该是以页面载入完成后，生成的DOM树为准，即新添加的DOM节点，不在最初生成的DOM树里面，所以他是一直没法获取到新生成的DOM节点的。</p>",
"<p>之后，用了事件托管，也就是事件代理（以jquery为准），解决了上述问题。关于事件托管的一些个人看法及优点，在后面讲。</p>",
"<br><strong>【Summary】</strong>",
"<p>之前看到过一个关于事件监听和事件托管的一个比喻，个人感觉比较贴切，现在转述过来，希望有所帮助：</p>",
"<div class=\"refer-content\"><p>事件委托：现实中好比有100 个学生同时在某天中午收到快递，但这100 个学生不可能同时站在学校门口等，那么都会委托门卫去收取，然后再逐个交给学生。</p>",
"<p>假如这个时候新增了一个DOM元素，就好比新转来了一个学生，但是身份证明（比如学生证还没办下来），这个学生直接去门卫那里拿，因为没有身份证明，所以拿不到快递。</p>",
"<p>这个时候如果是委托门卫收取，门卫会根据对应的快递信息，将快递分发给该学生。</p>",
"<p>也就是解决了之前提到的，对于新增的DOM节点，javascript无法获取到对应的DOM元素。</p></div>",
"<p>另外，关于事件托管的优点，也在这里再转述一下吧（虽说都是套话）：</p>",
"<div class=\"refer-content\"><p>1．管理的函数变少了。不需要为每个元素都添加监听函数。对于同一个父节点下面类似的子元素，可以通过委托给父元素的监听函数来处理事件。</p>",
"<p>2．可以方便地动态添加和修改元素，不需要因为元素的改动而修改事件绑定。</p>",
"<p>3．JavaScript和DOM节点之间的关联变少了，这样也就减少了因循环引用而带来的内存泄漏发生的概率。</p>",
"</div>",
"<p>以上，就是关于事件托管方面的一点个人感受了。</p>",
"<br><p class=\"sub-chapter\">-- 2016-08-08更新 --</p>",
"<p>补充一点，关于事件托管的原理：利用冒泡事件的原理，将事件添加到父元素上，触发执行效果。</p>"
]
}