{
"title": "【javascript】关于js函数自执行的另一种写法：function前加!、+、-等",
"index": "6",
"date" : "2016-07-30",
"tag"  : "javascript，自执行函数，匿名函数立即执行",
"content": [
"<strong>【Preface】</strong>",
"<p>最近闲着无聊，翻看了一下zepto的源码，虽说看的云里雾里，似懂非懂，无意间看到他的一种写法“+ function() {...}”，当时就蒙圈了，这特么这么写几个意思？</p>",
"<p>后来百度了一下，好像是自执行函数的“非常规”写法（之所以说非常规，因为平常习惯的用法都是添加括号来调用匿名函数，以及关于function和!（逻辑运算符）、+-···（一元运算符）的一些使用。</p>",
"<br><strong>【Main Body】</strong>",
"<p>贴一下代码，以下是几种自执行函数的写法（前面两个是常规的括号的写法）：</p>",
"<div class=\"code-container\"><code>",
"<xmp><script></xmp>",
"<xmp class=\"indent-1\">(function(){console.info('1')})();</xmp>",
"<xmp class=\"indent-1\">(function(){console.info('2')}());</xmp>",
"<xmp class=\"indent-1\">!function(){console.info('3')}();</xmp>",
"<xmp class=\"indent-1\">+function(){console.info('4');}();</xmp>",
"<xmp class=\"indent-1\">-function(){console.info('5');}();</xmp>",
"<xmp class=\"indent-1\">*function(){console.info('6');}();</xmp>",
"<xmp class=\"indent-1\">1,function(){console.info('7');}();</xmp>",
"<xmp class=\"indent-1\">1&function(){console.info('8');}();</xmp>",
"<xmp class=\"indent-1\">1|function(){console.info('9');}();</xmp>",
"<xmp class=\"indent-1\">1&&function(){console.info('10');}();/* 因为js的特性，如果逻辑“与”（“且”）第一位就是false（或者能转换为false的，比如0），则不会检查后面的内容 */</xmp>",
"<xmp class=\"indent-1\">0||function(){console.info('11');}();/* 因为js的特性，如果逻辑“或”第一位就是true（或者能转换为true的，比如1），则不会检查后面的内容 */</xmp>",
"<xmp></script></xmp>",
"</code></div>",
"<p>上述几种，根据了解到的一下内容，自己推断的几种写法，将语句输入到浏览器控制台，function内的语句也能正常运行（不要全部一起放在浏览器，好像会报错，分开一句一句验证可以正常运行）。</p>",
"<p>只由于匿名function，如果不定义return的值，默认返回的是undefined，所以函数能正常执行，但是最后返回的内容会有一点不一样。</p>",
"<br><strong>【Reference】</strong>",
"<p>后来百度了一下，找到一篇文章，关于“function和感叹号”的，里面发现了好多自己没想到的东西，现概括后转述一下。（<a class=\"external-link\" href=\"http://swordair.com/function-and-exclamation-mark/\" target=\"_blank\">查看原文</a>）</p>",
"<strong>为什么自执行函数能那样写？为什么必须这样写？</strong>",
"<p>其实无论是括号，还是感叹号，让整个语句合法化做的事情只有一件，就是让一个函数声明语句变成了一个表达式。</p>",
"<div class=\"code-container\"><code>",
"<xmp>function a() {...}    //undefined</xmp>",
"<xmp>function b() {...}()  //SyntaxError: unexpected_token</xmp>",
"</code></div>",
"<p>上述的代码示例，一个是函数声明，第二个函数声明，在那么一个声明后直接加上括号调用，解析器不理解并且报错。</p>",
"<p>因为混淆了函数声明和函数调用，以这种方式声明的函数a，应该以a()这种方式进行调用。</p>",
"<p>但是括号则不一样，它将一个函数声明转化成了一个表达式，解析器不再以函数声明的方式处理函数a，二十作为一个函数表达式处理，也因此只有在程序执行到函数a的时候才能被访问。</p>",
"<p>因此，任何消除函数声明和函数表达式之间歧义的方法，都可以被解析器正确识别。</p>",
"<p>除去上述的几种添加逻辑运算符、一元运算符和操作符，关键字也可以做到：</p>",
"<div class=\"code-container\"><code>",
"<xmp>void function() {alert('iifksp')}()        // undefined</xmp>",
"<xmp>new function() {alert('iifksp')}()         // Object</xmp>",
"<xmp>delete function() {alert('iifksp')}()      // true</xmp>",
"</code></div>",
"<p>最后，该作者关于性能这块，做了一个测试，详细的说明可以去原文看一下，现将他的测试结果转述一下（我也想自己做一下测试看的，但是不知道从何下手）：</p>",
"<div class=\"img-container size-md\"><img src=\"res/papers/img/006-01.jpg\"></div>",
"<br><strong>【Summary】</strong>",
"<div class=\"refer-content\"><p>new方法永远最慢——这也是理所当然的。其它方面很多差距其实不大，但有一点可以肯定的是，感叹号并非最为理想的选择。</p>",
"<p>反观传统的括号，在测试里表现始终很快，在大多数情况下比感叹号更快——所以平时我们常用的方式毫无问题，甚至可以说是最优的。</p>",
"<p>加减号在chrome表现惊人，而且在其他浏览器下也普遍很快，相比感叹号效果更好。</p>",
"<p>当然这只是个简单测试，不能说明问题。但有些结论是有意义的：括号和加减号最优。</p>",
"<p>但是为什么这么多开发者钟情于感叹号？我觉得这只是一个习惯问题，它们之间的优劣完全可以忽略。一旦习惯了一种代码风格，那么这种约定会使得程序从混乱变得可读。如果习惯了感叹号，我不得不承认，它比括号有更好的可读性。我不用在阅读时留意括号的匹配，也不用在编写时粗心遗忘——</p></div>",
"<p>所以对于zepto这个js类库，主要针对移动端，他是用+而不是!或者括号，还是有一定道理的——对于性能的极致追求（？）。</p>"
]
}